package chromaprint

import (
	"testing"
	"github.com/stretchr/testify/assert"
)

func TestUnpackInt3Array(t *testing.T) {
	assert.Equal(t, []int{ }, unpackInt3Array([]byte{ }))
	assert.Equal(t, []int{ 1, 2 }, unpackInt3Array([]byte{ 0x11 }))
	assert.Equal(t, []int{ 1, 2, 3, 4, 5 }, unpackInt3Array([]byte{ 0xd1, 0x58 }))
	assert.Equal(t, []int{ 1, 2, 3, 4, 5, 6, 7, 0 }, unpackInt3Array([]byte{ 0xd1, 0x58, 0x1f }))
	assert.Equal(t, []int{ 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5 }, unpackInt3Array([]byte{ 0xd1, 0x58, 0x1f, 0xd1, 0x58 }))
	assert.Equal(t, []int{ 1, 2, 3, 4, 5, 6, 7, 0, 1, 2, 3, 4, 5, 6, 7, 0 }, unpackInt3Array([]byte{ 0xd1, 0x58, 0x1f, 0xd1, 0x58, 0x1f }))
}

func TestUnpackInt5Array(t *testing.T) {
	assert.Equal(t,
		[]int{  },
		unpackInt5Array([]byte{  }))
	assert.Equal(t,
		[]int{ 1 },
		unpackInt5Array([]byte{ 0x1 }))
	assert.Equal(t,
		[]int{ 1, 2, 3 },
		unpackInt5Array([]byte{ 0x41, 0xc }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x2 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xc }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x9 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0x6 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0x1c }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x11 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0xa }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0x2d }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x19 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xe }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0x3d }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x7 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x07, 0x1 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x07, 0x41, 0xc }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x07, 0x41, 0x0c, 0x2 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x07, 0x41, 0x0c, 0x52, 0xc }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x07, 0x41, 0x0c, 0x52, 0xcc, 0x41 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x07, 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x9 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x07, 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x07, 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0x6 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x07, 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0x1c }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x07, 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83 }))
	assert.Equal(t,
		[]int{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 },
		unpackInt5Array([]byte{ 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x51, 0x4e, 0x5a, 0xed, 0xc5, 0x59, 0x6f, 0xde, 0xfd, 0x07, 0x41, 0x0c, 0x52, 0xcc, 0x41, 0x49, 0x2d, 0xd6, 0xdc, 0x83, 0x11 }))
}
